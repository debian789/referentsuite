[{
	"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/11/", 
	"titulo": "codigo python ", 
	"descripcion": "", 
	"links": "",
	"lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", 
	"archivo": "",
	 "codigo": "nombre = (\"angel\",\"lina\",\"martin\",\"angela\",\"sofia\",\"milena\",\"carla\",\"roberta\",\"nicol\")\r\n\r\ndef electoral(_tupla):\r\n\tfor x in _tupla:\r\n\t\tprint \"Estimado \",x ,\" vote por mi\"\r\n\r\n\r\n#electoral(nombre)\r\n\r\n\r\ndef electoral2(_tupla,p,n):\r\n\tfor x in _tupla[p-1:n+1]:\r\n\t\tprint \"Estimado \",x ,\" vote por mi\"\r\n\r\n\r\nelectoral2(nombre,2,2)\r\n\r\n#posicion(lista1,1,2)\r\nlista1 = [1,2,4,6,4,32,23,4,543,\"hola\"]\r\n\r\ndef inversion(_lista):\r\n\ttem = []\r\n\tfor x in _lista:\r\n\t\ttem.insert(0,x)\r\n\r\n\tprint tem\r\n\r\n\r\ninversion(lista1)"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/1/", "titulo": "manage.py", "descripcion": "codigo del archivo  manage.py", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", "archivo": "", "codigo": "#!/usr/bin/env python\r\nimport os\r\nimport sys\r\n\r\nif __name__ == \"__main__\":\r\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"administrador_codigo.settings\")\r\n\r\n    from django.core.management import execute_from_command_line\r\n\r\n    execute_from_command_line(sys.argv)\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/5/", "titulo": "Ejemplo de un codigo html ", "descripcion": "estructura de una pagina web ", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/4/", "archivo": "", "codigo": "<!doctype html>\r\n<html lang=\"es\">\r\n<head>\r\n\t<meta charset=\"UTF-8\">\r\n\t<title>Document</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\">\r\n\t<script src=\"jquery-2.1.0.min.js\"></script>\r\n\t<script src=\"main.js\"></script>\r\n\r\n\r\n</head>\r\n<body>\r\n<section id=\"contenido\">\r\n\t\r\n\t<table id=\"informacion\">\r\n\t\t<tr>\r\n\t\t\t<td rowspan=\"3\" > Materia</td>\r\n\t\t\t<td colspan=\"10\" ><h3>Fases  de Aprendizaje</h3></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"2\" class=\"td100\">Reconocimiento</td>\r\n\t\t\t<td colspan=\"4\" class=\"td100\">Unidad 1</td>\r\n\t\t\t<td colspan=\"4\" class=\"td100\">Unidad 2</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class=\"td50\">act1</td>\r\n\t\t\t<td>act2</td>\r\n\t\t\t<td>act3</td>\r\n\t\t\t<td>act4</td>\r\n\t\t\t<td>act5</td>\r\n\t\t\t<td>act6</td>\r\n\t\t\t<td>act7</td>\r\n\t\t\t<td>act8</td>\r\n\t\t\t<td>act9</td>\r\n\t\t\t<td>act10</td>\r\n\t\t\t<td></td>\r\n\r\n\t\t</tr>\r\n\t\r\n\t<table id=\"contenidoMaterias\">\r\n\t\t<tr id=\"materias\" >\r\n\t\t\t<td ><div id=\"nombre-materia\" contenteditable=\"true\"></div></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td  contenteditable=\"true\"></td>\r\n\t\t\t<td><div class=\"eliminar icon-x-altx-alt\"> </div></td>\r\n\t\t</tr>\r\n\t</table>\r\n\r\n\r\n\t<div id=\"mas\">Agregar Item <span class=\"icon-plus-alt\"></span></div>\r\n\r\n\r\n\t\r\n</section>\r\n\t\r\n\r\n</body>\r\n</html>"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/6/", "titulo": "Ejemplo de manifest.xml plugin de google chrome", "descripcion": "manifest.xml para crear plugin de google chrome", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/13/", "archivo": "", "codigo": "{\r\n   \"app\": {\r\n      \"launch\": {\r\n         \"local_path\": \"index.html\"\r\n      }\r\n   },\r\n   \"description\": \"Cronograma de actividades\",\r\n   \"icons\": {\r\n      \"128\": \"actividad.png\",\r\n      \"16\": \"actividad2.png\"\r\n   },\r\n   \"manifest_version\": 2,\r\n   \"name\": \"Actividades\",\r\n   \"offline_enabled\": true,\r\n   \"version\": \"0.1\"\r\n}"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/7/", "titulo": "Ejemplo de manifest.xml plugin de google chrome", "descripcion": "manifest.xml para crear plugin de google chrome", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/14/", "archivo": "", "codigo": "{\r\n   \"app\": {\r\n      \"launch\": {\r\n         \"local_path\": \"index.html\"\r\n      }\r\n   },\r\n   \"description\": \"Cronograma de actividades\",\r\n   \"icons\": {\r\n      \"128\": \"actividad.png\",\r\n      \"16\": \"actividad2.png\"\r\n   },\r\n   \"manifest_version\": 2,\r\n   \"name\": \"Actividades\",\r\n   \"offline_enabled\": true,\r\n   \"version\": \"0.1\"\r\n}"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/9/", "titulo": "Utilizacion de nib - stylus ", "descripcion": "permite importar librerias y utilizar nib", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/3/", "archivo": "", "codigo": "@import \"iconfonts.styl\"\r\n@import \"fonts.styl\"\r\n@import 'nib/vendor'\r\n@import 'nib/gradients'\r\n\r\nvendor-prefixes = o ms moz webkit official\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/10/", "titulo": "context processors ", "descripcion": "procesador de contexto ", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", "archivo": "", "codigo": "from random import choice \r\n\r\nfrases = ['hola mundo ','django es lo mejor ','es dominto :P']\r\n\r\ndef saludar(request):\r\n\treturn {'saludo':choice(frases)}\r\n\r\nfrom django.core.urlresolvers import reverse\r\n\r\ndef menu(request):\r\n    menu = {'menu': [\r\n        {'name': 'Mis Comandos', 'url':reverse('comandos')},\r\n        {'name': 'Mis Codigos', 'url': reverse('codigos')},\r\n        {'name': 'Mis Proyectos', 'url': reverse('proyectos')},\r\n    ]}\r\n    for item in menu['menu']:\r\n        if request.path == item['url']:\r\n            item['active'] = True\r\n    return menu\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/13/", "titulo": "configuracion basica web.xml", "descripcion": "configuracion basica web.xmls", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/5/", "archivo": "", "codigo": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n         version=\"3.0\">\r\n    <session-config>\r\n        <session-timeout>\r\n            30\r\n        </session-timeout>\r\n    </session-config>\r\n    \r\n    <servlet>\r\n        <servlet-name>Faces Servlet</servlet-name>\r\n        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>Faces Servlet</servlet-name>\r\n        <url-pattern>*.jsp</url-pattern>\r\n    </servlet-mapping>\r\n</web-app>\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/15/", "titulo": "selvelts bascio ", "descripcion": "configuracion basica de un selvelt", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/5/", "archivo": "", "codigo": "    <servlet>\r\n        <servlet-name>DescargaImagenes</servlet-name>\r\n        <servlet-class>Servlets.classDescargaImagenesServlet</servlet-class>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>DescargaImagenes</servlet-name>\r\n        <url-pattern>/images/*</url-pattern>\r\n    </servlet-mapping>"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/16/", "titulo": "natalia", "descripcion": "", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/12/", "archivo": "", "codigo": "jhajksfhbva <x"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/14/", "titulo": "Dao java - conexion ", "descripcion": "conexion java ", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/5/", "archivo": "", "codigo": "package Mundo;\r\n\r\nimport DaoBeanBO.classFilaBO;\r\nimport DaoBeanBO.classParametroBO;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.math.BigDecimal;\r\nimport java.sql.CallableStatement;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Timestamp;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Properties;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport javax.naming.NamingException;\r\n\r\n/**\r\n * Ofrece los servicios b\ufffdsicos de persistencia\r\n *\r\n * @author Sebastian\r\n *\r\n */\r\npublic class PWA_DAO {\r\n\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Constantes\r\n    // --------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Log de la instancia\r\n     */\r\n    public static String TIPO_DATO_INT = \"int\";\r\n    public static String TIPO_DATO_LONG = \"long\";\r\n    public static String TIPO_DATO_STRING = \"string\";\r\n    public static String TIPO_DATO_TIMESTAMP = \"timestamp\";\r\n    public static String TIPO_DATO_DECIMAL = \"decimal\";\r\n    private Logger log;\r\n    /**\r\n     * Nombre del driver JDBC de la base de datos\r\n     */\r\n    private String DEFAULT_DATABASE_DRIVER = \"com.mysql.jdbc.Driver\";\r\n    /**\r\n     * URL de conexi\ufffdn por defecto\r\n     */\r\n    private String DEFAULT_URL = \"jdbc:mysql://localhost:3306/db?noAccessToProcedureBodies=true\";\r\n    /**\r\n     * Cat\ufffdlogo con el que se trabaja por defecto\r\n     */\r\n    private String DEFAULT_USER = \"\";\r\n    /**\r\n     * Contrase\ufffda por defecto\r\n     */\r\n    private String DEFAULT_PASSWORD = \"\";\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Miembros de la clase\r\n    // --------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Instancia compartida de la clase\r\n     */\r\n    private static PWA_DAO instance;\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Atributos\r\n    // --------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Conexi\ufffdn con la base de datos\r\n     */\r\n    private Connection connection;\r\n\r\n    // --------------------------------------------------------------------------------------------------\r\n    // Constructores\r\n    // --------------------------------------------------------------------------------------------------\r\n    /**\r\n     * CORRER ESTE MAIN PARA PROBAR LOS PROCEDIMIENTOS (ESTE ES EL DE AGREGAR\r\n     * ROL)\r\n     */\r\n    public static void main(String[] args) {\r\n\r\n        ArrayList<classParametroBO> params = new ArrayList<classParametroBO>();\r\n        params.add(new classParametroBO(\"pID_ROLES\", \"58\", \"int\"));\r\n        params.add(new classParametroBO(\"pNOMBRE_ROL\", \"nuevo\", \"string\"));\r\n        params.add(new classParametroBO(\"pUSUARIO_MODIFICADOR\", \"admin\", \"string\"));\r\n        params.add(new classParametroBO(\"pUSUARIO_CREADOR\", \"admin\", \"string\"));\r\n        params.add(new classParametroBO(\"pFECHA_MODIFICACION\", new Timestamp(new Date().getTime()), \"timestamp\"));\r\n        params.add(new classParametroBO(\"pFECHA_CREACION\", new Timestamp(new Date().getTime()), \"timestamp\"));\r\n        try {\r\n            ArrayList<classFilaBO> asd = PWA_DAO.getInstance().ejecutar(\"sp_insertar_role\", params, false);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public PWA_DAO() throws Exception {\r\n        log = Logger.getLogger(this.getClass().getCanonicalName());\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    public void createDefaultParams() throws Exception {\r\n\r\n        Properties props = new Properties();\r\n        props.setProperty(\"driver\", DEFAULT_DATABASE_DRIVER);\r\n        props.setProperty(\"url\", DEFAULT_URL);\r\n        props.setProperty(\"user\", \"\" + DEFAULT_USER);\r\n        props.setProperty(\"password\", \"\" + DEFAULT_PASSWORD);\r\n        File f = new File(\"dbServer.properties\");\r\n        OutputStream out = new FileOutputStream(f);\r\n        props.store(out, \"DB Server Data\");\r\n        out.close();\r\n\r\n    }\r\n\r\n    public void loadParams() throws Exception {\r\n        Properties props = new Properties();\r\n        InputStream is = null;\r\n\r\n        // First try loading from the current directory\r\n        try {\r\n            File f = new File(\"dbServer.properties\");\r\n            System.err.println(\"FILE: \"+f.getAbsolutePath());\r\n            is = new FileInputStream(f);\r\n            props.load(is);\r\n            DEFAULT_DATABASE_DRIVER = props.getProperty(\"driver\");\r\n            DEFAULT_URL = props.getProperty(\"url\");\r\n            DEFAULT_USER = props.getProperty(\"user\");\r\n            DEFAULT_PASSWORD = props.getProperty(\"password\");\r\n            is.close();\r\n\r\n        } catch (Exception e) {\r\n            //e.printStackTrace();\r\n            createDefaultParams();\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    public void connect() throws SQLException, ClassNotFoundException {\r\n        try {\r\n/*\r\n            javax.naming.InitialContext ctx = new javax.naming.InitialContext();\r\n            javax.sql.DataSource ds = (javax.sql.DataSource) ctx.lookup(\"jdbc/markeetic\");\r\n            connection = ds.getConnection();*/\r\n            \r\n             try {\r\n             loadParams();\r\n             } catch (Exception ex) {\r\n             Logger.getLogger(PWA_DAO.class.getName()).log(Level.SEVERE, null, ex);\r\n             }\r\n             System.err.println(\"=CONNECT=>\"+ DEFAULT_DATABASE_DRIVER+\",\"+DEFAULT_URL+\",\"+DEFAULT_USER+\",\"+DEFAULT_PASSWORD);\r\n             Class.forName(DEFAULT_DATABASE_DRIVER);\r\n             connection = DriverManager.getConnection(DEFAULT_URL,\r\n             DEFAULT_USER, DEFAULT_PASSWORD);\r\n             \r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n            System.err.println(\"=======\");\r\n        }\r\n    }\r\n\r\n    public void iniciarTransaccion(int nivelAislamiento) throws Exception {\r\n        connection.setAutoCommit(false);\r\n        connection.setTransactionIsolation(nivelAislamiento);\r\n\r\n    }\r\n\r\n    public void terminarTransaccion() throws Exception {\r\n        connection.commit();\r\n        connection.setAutoCommit(true);\r\n    }\r\n\r\n    public void abortarTransaccion() throws Exception {\r\n        connection.rollback();\r\n        connection.setAutoCommit(true);\r\n    }\r\n\r\n    public ArrayList<classFilaBO> ejecutar(String nombreSP, ArrayList<classParametroBO> params, boolean puntoGuardado) throws Exception {\r\n\r\n        String paramCount = \"(\";\r\n\r\n        if (params.size() == 0) {\r\n            paramCount = \"()\";\r\n        } else {\r\n            for (int i = 0; i < params.size(); i++) {\r\n                if (i != params.size() - 1) {\r\n                    paramCount += \"?,\";\r\n                } else {\r\n                    paramCount += \"?)\";\r\n                }\r\n            }\r\n\r\n        }\r\n        String sp = \"{call \" + nombreSP + \" \" + paramCount + \"}\";\r\n        System.out.println(\"--> \" + sp + \", PARAMS: \" + params.size());\r\n        CallableStatement pstmt = connection.prepareCall(sp);\r\n\r\n        for (int i = 0; i < params.size(); i++) {\r\n            System.out.println(\"-->NAME: \" + i + \" - \" + params.get(i).getNombre());\r\n            System.out.println(\"-->PARAM: \" + i + \" - \" + params.get(i).getValor());\r\n\r\n\r\n            try {\r\n                if (params.get(i).getTipoDato().equals(TIPO_DATO_INT)) {\r\n                    if (Integer.parseInt(params.get(i).getValor().toString()) == Integer.MIN_VALUE) {\r\n                        throw new Exception();\r\n                    }\r\n                    pstmt.setInt(i + 1, Integer.parseInt(params.get(i).getValor().toString()));\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_STRING)) {\r\n                    pstmt.setString(i + 1, params.get(i).getValor().toString());\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_TIMESTAMP)) {\r\n                    pstmt.setTimestamp(i + 1, (Timestamp) params.get(i).getValor());\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_LONG)) {\r\n                    if (Long.parseLong(params.get(i).getValor().toString()) == Long.MIN_VALUE) {\r\n                        throw new Exception();\r\n                    }\r\n                    pstmt.setLong(i + 1, Long.parseLong(params.get(i).getValor().toString()));\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_DECIMAL)) {\r\n                    pstmt.setBigDecimal(i + 1, (BigDecimal) params.get(i).getValor());\r\n                } else {\r\n                    pstmt.setBinaryStream(i + 1, (InputStream) params.get(i).getValor());\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"NULL\");\r\n                if (params.get(i).getTipoDato().equals(TIPO_DATO_INT)) {\r\n                    pstmt.setNull(i + 1, java.sql.Types.INTEGER);\r\n\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_STRING)) {\r\n                    pstmt.setNull(i + 1, java.sql.Types.VARCHAR);\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_TIMESTAMP)) {\r\n                    pstmt.setNull(i + 1, java.sql.Types.TIMESTAMP);\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_LONG)) {\r\n                    pstmt.setNull(i + 1, java.sql.Types.BIGINT);\r\n                } else if (params.get(i).getTipoDato().equals(TIPO_DATO_DECIMAL)) {\r\n                    pstmt.setNull(i + 1, java.sql.Types.DECIMAL);\r\n                } else {\r\n                    pstmt.setNull(i + 1, java.sql.Types.VARBINARY);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        pstmt.executeUpdate();\r\n        if (puntoGuardado) {\r\n            connection.setSavepoint();\r\n        }\r\n\r\n        ArrayList<classFilaBO> str = new ArrayList<classFilaBO>();\r\n\r\n        ResultSet rs = pstmt.getResultSet();\r\n        if (rs != null) {\r\n            while (rs.next()) {\r\n                ArrayList<Object> tmp = new ArrayList<Object>();\r\n                for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {\r\n                    tmp.add(rs.getObject(i));\r\n                }\r\n                str.add(new classFilaBO(tmp));\r\n            }\r\n\r\n        }\r\n        return str;\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * M\u00e9todo que Desconecta este objeto de la base de datos.\r\n     */\r\n    public void disconnect() {\r\n        if (connection != null) {\r\n            try {\r\n                connection.close();\r\n            } catch (SQLException e) {\r\n                log.warning(\"Ocurri\ufffd un error al cerrar la conexi\ufffdn\");\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static PWA_DAO getInstance() throws Exception {\r\n        return new PWA_DAO();\r\n    }\r\n}\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/8/", "titulo": "autorizacion redes sociales ", "descripcion": "configuracion de settings.py", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", "archivo": "", "codigo": "\r\nLOGIN_URL = '/login/'\r\n\r\n# Python Social Auth\r\n\r\n## Twitter\r\nSOCIAL_AUTH_TWITTER_KEY = '' \r\nSOCIAL_AUTH_TWITTER_SECRET = '' \r\n\r\n\r\n## Facebook\r\n#SOCIAL_AUTH_FACEBOOK_KEY = ''\r\n#SOCIAL_AUTH_FACEBOOK_SECRET = ''\r\n#SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']\r\n\r\n# Backends\r\nAUTHENTICATION_BACKENDS = (\r\n    'social.backends.facebook.FacebookAppOAuth2',\r\n    'social.backends.facebook.FacebookOAuth2',\r\n    'social.backends.twitter.TwitterOAuth',\r\n    'django.contrib.auth.backends.ModelBackend',\r\n)\r\n\r\n# URLs\r\nSOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'\r\nSOCIAL_AUTH_LOGIN_URL = '/login/'\r\n"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/17/", "titulo": "asd", "descripcion": "asd", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", "archivo": "", "codigo": "print \"hola\""}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/18/", "titulo": "esquema de un package.json - en node.js ", "descripcion": "ejemplo de estema de package.json en node ", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/2/", "archivo": "", "codigo": "{\r\n    \"version\": \"0.0.1-3\",\r\n    \"dependencies\": {\r\n        \"express\": \"3.0.4\",\r\n        \"jade\": \"0.27.7\",\r\n        \"consolidate\": \"0.5.0\",\r\n        \"socket.io\": \"0.9.11\"\r\n    },\r\n    \"subdomain\": \"siedrix6.curso-mejorandola\",\r\n    \"scripts\": {\r\n        \"start\": \"server.js\"\r\n    },\r\n    \"engines\": {\r\n        \"node\": \"0.8.x\"\r\n    },\r\n    \"name\": \"curso-mejorandola-latinoamerica\"\r\n}"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/19/", "titulo": "manejo con JSON y localStorage ", "descripcion": "localstogare y JSON ", "links": "http://rolandocaldas.com/html5/localstorage-en-html5", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/2/", "archivo": "", "codigo": "// Creamos un objeto\r\nvar object = { 'uno' : '1', 'dos' : '2' };\r\n// Lo guardamos en localStorage pasandolo a cadena con JSON\r\nlocalStorage.setItem('key', JSON.stringify(object));\r\n// Creamos una nueva variable object2 con el valor obtenido de localStorage usando JSON recuperar el objeto inicial\r\nvar object2 = JSON.parse(localStorage.getItem('key'));\r\n// La alerta mostrar\u00e1 1 por pantalla\r\nalert(object2.uno);"}, {"url": "http://cryptic-mesa-8094.herokuapp.com/api/codigos/20/", "titulo": "manejo de dependencias con pip ", "descripcion": "crear el archivo requirements.txt  e instarlar librerias de este ", "links": "", "lenguaje": "http://cryptic-mesa-8094.herokuapp.com/api/leguaje/1/", "archivo": "", "codigo": "\r\npip freeze > requirements.txt        # crear el archivo \r\npip install  -r requirements.txt       #instalar dependencias \r\n"}]